/**
 * Converts post content to text.
 * @param  {object} post
 * @param  {object} options — `{ messages, excludeQuotes }`
 * @return {string}
 */
export default function getPostText(post, options = {}) {
	if (!post.content) {
		return ''
	}
	// Simple case optimization.
	if (typeof post.content === 'string') {
		return post.content
	}
	// Concatenate post paragraphs' text.
	const text = post.content.map((paragraph) => {
		return getContentText(paragraph, {
			...options,
			attachments: post.attachments
		})
	}).filter(_ => _).join('\n\n')
	if (text) {
		return text
	}
	// If there're any attachments then fall back to attachment text.
	if (post.attachments.length > 0 && !options.ignoreAttachments) {
		for (const attachment of post.attachments) {
			if (getAttachmentTitle(attachment)) {
				return getAttachmentTitle(attachment)
			}
		}
		if (options.messages) {
			for (const attachment of post.attachments) {
				if (getAttachmentMessage(attachment, options.messages)) {
					return getAttachmentMessage(attachment, options.messages)
				}
			}
		}
	}
	return ''
}

function getContentText(content, options) {
	if (Array.isArray(content)) {
		content = removePostLinks(content)
		if (options.excludeQuotes) {
			content = removeQuotes(content)
		}
		return content.map(_ => getContentText(_, options)).join('')
	}
	if (typeof content === 'string') {
		return content
	}
	const part = content
	const getContent = () => getContentText(part.content, options)
	switch (part.type) {
		case 'quote':
			if (options.excludeQuotes) {
				return ''
			}
			if (part.source) {
				return `«${getContent()}» — ${part.source}`
			}
			return `«${getContent()}»`
		case 'inline-quote':
			return `«${getContent()}»`
		case 'spoiler':
			return `(${getContent()})`
		case 'attachment':
			if (options.ignoreAttachments || options.skipAttachments) {
				return ''
			}
			const attachment = options.attachments.find(_ => _.id === part.attachmentId)
			if (!attachment) {
				return ''
			}
			const title = getAttachmentTitle(attachment)
			if (title) {
				return title
			}
			if (options.skipUntitledAttachments) {
				return ''
			}
			if (!options.messages) {
				return ''
			}
			return getAttachmentMessage(attachment, options.messages) || ''
		default:
			return getContent()
	}
}

export function removeQuotes(content) {
	const newContent = removeQuote(content)
	if (newContent === content) {
		return content
	}
	return removeQuote(newContent)
}

export function removePostLinks(content) {
	const newContent = removePostLink(content)
	if (newContent === content) {
		return content
	}
	return removePostLinks(newContent)
}

function removeQuote(content) {
	const inlineQuote = content.find(part => typeof part === 'object' && part.type === 'inline-quote')
	if (inlineQuote) {
		const inlineQuoteIndex = content.indexOf(inlineQuote)
		const hasNewLine = content[inlineQuoteIndex + 1] === '\n'
		return content.slice(0, inlineQuoteIndex).concat(content.slice(inlineQuoteIndex + (hasNewLine ? 2 : 1)))
	}
	const quote = content.find(part => typeof part === 'object' && part.type === 'quote')
	if (quote) {
		const quoteIndex = content.indexOf(quote)
		return content.slice(0, quoteIndex).concat(content.slice(quoteIndex + 1))
	}
	return content
}

function removePostLink(content) {
	const postLink = content.find(part => typeof part === 'object' && part.type === 'post-link')
	if (!postLink) {
		return content
	}
	const postLinkIndex = content.indexOf(postLink)
	let hasNewLine = false
	let hasAutomaticQuote = false
	let hasNewLineAfterAutomaticQuote = false
	if (content[postLinkIndex + 1] === '\n') {
		hasNewLine = true
		const possibleAutomaticQuote = content[postLinkIndex + 2]
		if (typeof possibleAutomaticQuote === 'object' && possibleAutomaticQuote.autogenerated) {
			hasAutomaticQuote = true
			if (content[postLinkIndex + 3] === '\n') {
				hasNewLineAfterAutomaticQuote = true
			}
		}
	}
	return content.slice(0, postLinkIndex).concat(content.slice(
		hasAutomaticQuote ?
			(hasNewLineAfterAutomaticQuote ? postLinkIndex + 4 : postLinkIndex + 3) :
			(hasNewLine ? postLinkIndex + 2 : postLinkIndex + 1)
	))
}

function getAttachmentTitle(attachment) {
	switch (attachment.type) {
		case 'picture':
			if (attachment.picture.title) {
				return attachment.picture.title
			}
			break
		case 'video':
			if (attachment.video.title) {
				return attachment.video.title
			}
			break
	}
}

function getAttachmentMessage(attachment, messages) {
	switch (attachment.type) {
		case 'picture':
			return messages.attachmentPicture
		case 'video':
			return messages.attachmentVideo
	}
}